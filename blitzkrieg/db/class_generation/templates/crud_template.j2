from sqlalchemy.orm import Session
from blitzkrieg.project_management.db.models.{{ model_name }} import {{ model_class }}
class {{ model_class }}CRUD:
    @staticmethod
    def create_{{ model_name }}(session: Session, {{ model_name }}: {{ model_class }}):
        session.add({{ model_name }})
        session.commit()
        session.refresh({{ model_name }})
        return {{ model_name }}

    @staticmethod
    def create_{{ model_name }}s(session: Session, {{ model_name }}s: list):
        session.add_all({{ model_name }}s)
        session.commit()
        return {{ model_name }}s

    @staticmethod
    def get_{{ model_name }}_by_id(session: Session, {{ model_name }}_id: int):
        return session.query({{ model_class }}).filter({{ model_class }}.id == {{ model_name }}_id).first()

    @staticmethod
    def get_{{ model_name }}s_by_ids(session: Session, {{ model_name }}_ids: list):
        return session.query({{ model_class }}).filter({{ model_class }}.id.in_({{ model_name }}_ids)).all()

    @staticmethod
    def get_{{ model_name }}_by_index(session: Session, {{ model_name }}_index: int):
        return session.query({{ model_class }}).filter({{ model_class }}.index == {{ model_name }}_index).first()

    @staticmethod
    def get_{{ model_name }}s_by_indices(session: Session, {{ model_name }}_indices: list):
        return session.query({{ model_class }}).filter({{ model_class }}.index.in_({{ model_name }}_indices)).all()

    @staticmethod
    def get_all_{{ model_name }}s(session: Session):
        return session.query({{ model_class }}).all()

    @staticmethod
    def get_all_paginated_{{ model_name }}s(session: Session, page: int, per_page: int):
        return session.query({{ model_class }}).offset((page - 1) * per_page).limit(per_page).all()

    @staticmethod
    def get_{{ model_name }}_with_relations(session: Session, {{ model_name }}_id: int, relations: list):
        query = session.query({{ model_class }}).options(joinedload(*relations))
        return query.filter({{ model_class }}.id == {{ model_name }}_id).first()

    @staticmethod
    def get_{{ model_name }}s_with_relations(session: Session, {{ model_name }}_ids: list, relations: list):
        query = session.query({{ model_class }}).options(joinedload(*relations))
        return query.filter({{ model_class }}.id.in_({{ model_name }}_ids)).all()


    @staticmethod
    def update_{{ model_name }}(session: Session, {{ model_name }}: {{ model_class }}):
        session.merge({{ model_name }})
        session.commit()
        return {{ model_name }}

    @staticmethod
    def update_{{ model_name }}s(session: Session, {{ model_name }}s: list):
        session.bulk_update_mappings({{ model_class }}, {{ model_name }}s)
        session.commit()
        return {{ model_name }}s

    @staticmethod
    def delete_{{ model_name }}(session: Session, {{ model_name }}_id: int):
        {{ model_name }} = session.query({{ model_class }}).filter({{ model_class }}.id == {{ model_name }}_id).first()
        if {{ model_name }}:
            session.delete({{ model_name }})
            session.commit()
        return {{ model_name }}

    @staticmethod
    def delete_{{ model_name }}s(session: Session, {{ model_name }}_ids: list):
        {{ model_name }}s = session.query({{ model_class }}).filter({{ model_class }}.id.in_({{ model_name }}_ids)).all()
        if {{ model_name }}s:
            session.delete({{ model_name }}s)
            session.commit()
        return {{ model_name }}s

    @staticmethod
    def get_next_index(session: Session):
        {{ model_name }} = session.query({{ model_class }}).order_by({{ model_class }}.index.desc()).first()
        if {{ model_name }}:
            return {{ model_name }}.index + 1
        else:
            return 1
